/* msg.x: Remote msg printing protocol */

/* 
 * This is the interface definition file, which is specified in the XDR language.  
 * 
 * This file is used by rpcgen to generate client and server "stubs."
 * These stubs contain the code necessarily to perform the low-level code
 * needed to marshal/unmarshal data send data to/from the client/server.
 * In our example, this autogenerated low-level contained in msg_clnt.c
 * and msg_svc.c.  rpcgen also generates a header file that must be
 * included in the client and server-side code (rprintmsg.c and
 * msg_proc.c).

 * The language this file uses is XDR.  There is a "program" which
 * encapsulates a group of related functions.  The program may
 * encapsulate different versions of itself.
 */

/* 
* A complex data that will be passed from client to server.  
* This data structure is agreed upon by client and server. 
*/
struct messagelist {
   /* Char *s that represent null terminated strings need to be declared as 
    * strings in XDR. This is because a char * is ambigous.  It could point to 
    * a single character or to a NULL terminated string; XDR can't know 
    * the difference. 
    */ 
   string name<255>;  /* char* strings need to be declared as strings in XDR w/a max size */
   int count;
   messagelist *next;
};

program MESSAGEPROG {
     version PRINTMESSAGEVERS {
        /* The "1" below is a procedure number.  Every fn must have a unique numer. */	
        int PRINTMESSAGE(struct messagelist *) = 1;
 	 } = 1;			 
} = 0x20000001;
