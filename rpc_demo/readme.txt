README
------

Overview
--------
This code demonstrates how to use ONC RPC system to send RPCs from a
client to a server.  ONC RPC is one of the original RPC mechanisms.
It was developed all the way back in the 1980s as part of the Network
File System (NFS) by Sun and was used with the C programming language.
Today, there are many RPC systems.  Some include gRPC and Apache
Thrift.  Java has an object-oriented version of RPCs called RMI (Remote Method Invocation).

At a basic level, all RPC systems are structured in the same way.
They require as input an interface-definition file, client-side code,
and server-side code.  The interface-definition file is paramount and
represents a shared contract between clients and servers.  It lists
the RPCs that can be called on servers and the data types that the RPC
will used.  The interface-definition file is often language neutral
(i.e., written in its own language) to allow an RPC system to be used
with multiple programming languages.  

RPC systems come with an executable that will read the
interface-definition file and generate the low-level code, called
stubs, necessary to serialize (or marshal) data and send data from the
client to server and vice versa.  The executable may also allow developers
to specify which programming language should be used to generate the
stubs.  Depending on the language chosen, the executable may also
create a header file which lists the shared data types, the RPC
function names that the client should use, and the RPC function names
the server should use.  

The client-side and server-side code is written by developers and
compiled with the auto-generated stubs.  The client-side code calls
the RPC function specified in the client-side stub.  The server-side
code implements the remote (RPC) function and is called by the
server-side stub.

The stubs serialize data in a common format.  ONC RPC uses the XDR
format (external data representation).  Google's gRPC uses protocol
buffers and Apache Thrift uses Thrift.  Certain serialized formats and
interface definitions are useful outside of RPCs because due to their
compactness and because they are self describing.  For example, large
companies, such as Facebook and Google, store much of their data on
disks in Thrift or protocol buffer format respectively.


Code
-----
This example of ONC RPC sends a message from a client to a server.
The message contains two arbitrary strings.  It demonstrates how ONC
RPC can be used and how complex data types (a linked list) can be sent
over the network using ONC RPC.  There are several files.
Please look at all of them to understand how RPCs work.

**User_provided files**:

msg.x: This is the interface-definition file, written in the XDR
interface language.

rprintmsg.c: This is the client side code that calls the RPC.  It
simply sends two strings to the server.

msg_proc.c: This is the server-side code that prints the string to a
file ("output").

**Auto-generated files**:

All these files are generated by running the `rpcgen` executable on
msg.x.  Rpcgen is included in most Linux distributions (including
mac).

msg_svc.c: Server-side stub code

msg_clnt.c: Client-side stub code

msg.h: Header file lists RPC names at both client and server end and
shared data types.

msg_xdr.c: Contains code that serializes the complex data types
specified in msg.x.  It also converts from/to network byte worker.
The code in the file breaks the complex data type into basic data
types.  It uses the XDR library to then encode those basic data type
into the XDR format.  

Compiling and running the code
------------------
1) Type make to use the provided makefile.
2) start the server by typing ./msg_server.  The server will run in the background.
3) run ./rprintmsg localhost <some string> <some string2>
4) The strings will be written to the file "output" in the same directory. 
